{"version":3,"file":"static/js/925.2dc89bce.chunk.js","mappings":"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","sources":["webpack://rick-and-morty/./src/pages/CharacterPage/CharacterPage.module.css?7b6c","pages/CharacterPage/CharacterPage.jsx","serveses/Api.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"Section\":\"CharacterPage_Section__Y4BfE\",\"Container\":\"CharacterPage_Container__KmjN-\",\"TxtWrapper\":\"CharacterPage_TxtWrapper__ToLPR\",\"CharacterImg\":\"CharacterPage_CharacterImg__l8L2p\",\"CharacterName\":\"CharacterPage_CharacterName__EG63N\",\"Info\":\"CharacterPage_Info__haKzP\",\"BackBtn\":\"CharacterPage_BackBtn__gHtMT\",\"TxtOptions\":\"CharacterPage_TxtOptions__nMwld\",\"Wrapper\":\"CharacterPage_Wrapper__O2Ejl\"};","import { useState, useEffect } from 'react';\nimport { useParams, Outlet, useLocation, NavLink } from 'react-router-dom';\nimport { getCharacterDetails } from 'serveses/Api';\nimport { Loader } from '../../components/Loader/Loader';\nimport css from './CharacterPage.module.css';\n\nexport default function CharacterPage() {\n  const [characters, setCharacters] = useState({});\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  let { id } = useParams();\n\n  const location = useLocation();\n  const locationFrom = location?.state?.from ?? '/';\n\n  useEffect(() => {\n    if (id) {\n      const oneCharacter = async () => {\n        setIsLoading(true);\n        try {\n          const data = await getCharacterDetails(id);\n          console.log(data); //shown character\n          setCharacters(data);\n        } catch (error) {\n          setError(error);\n        } finally {\n          setIsLoading(false);\n        }\n      };\n      oneCharacter();\n    }\n  }, [id]);\n\n  // console.log(characters);\n\n  const { name } = characters;\n\n  return (\n    <>\n      <main className={css.Container}>\n        <NavLink to={locationFrom} className={css.BackBtn}>\n          ⬅️ GO BACK\n        </NavLink>\n        {isLoading && <Loader />}\n        {!error && (\n          <div className={css.Section}>\n            <img\n              className={css.CharacterImg}\n              src={`https://rickandmortyapi.com/api/character/avatar/${id}.jpeg`}\n              alt={name}\n              width={'240px'}\n            />\n\n            <div className={css.TxtWrapper}>\n              <h1 className={css.CharacterName}>{characters.name}</h1>\n              <h2 className={css.Info}>Informations</h2>\n              <div className={css.Wrapper}>\n                <h3 className={css.TxtOptions}>Gender</h3>\n                <p className={css.TxtInfo}>{characters.gender}</p>\n              </div>\n              <div className={css.Wrapper}>\n                <h3 className={css.TxtOptions}>Status</h3>\n                <p className={css.TxtInfo}>{characters.status}</p>\n              </div>\n              <div className={css.Wrapper}>\n                <h3 className={css.TxtOptions}>Species </h3>\n                <p>{characters.species}</p>\n              </div>\n              <div className={css.Wrapper}>\n                <h3 className={css.TxtOptions}>Origin</h3>\n                <p className={css.TxtInfo}>{characters.origin?.name}</p>\n              </div>\n              <div className={css.Wrapper}>\n                <h3 className={css.TxtOptions}>Type</h3>\n                {characters.type ? (\n                  <p className={css.TxtInfo}>{characters.type}</p>\n                ) : (\n                  <p className={css.TxtInfo}>No info</p>\n                )}\n              </div>\n            </div>\n          </div>\n        )}\n      </main>\n\n      <Outlet />\n    </>\n  );\n}\n","import axios from 'axios';\n\nconst BASE_URL = 'https://rickandmortyapi.com/api';\n\nexport async function getCharacterDetails(id) {\n  const response = await axios.get(`${BASE_URL}/character/${id}`);\n\n  return response.data;\n}\n\nexport async function getAllCharacters() {\n  // const charactersPerPage = 20;\n  let allCharacters = [];\n  let totalPages = 1;\n  let currentPage = 1;\n\n  while (currentPage <= totalPages) {\n    const response = await fetch(`${BASE_URL}/character/?page=${currentPage}`);\n    const { info, results } = await response.json();\n    allCharacters = [...allCharacters, ...results];\n    totalPages = info.pages;\n    currentPage++;\n  }\n\n  return allCharacters;\n}\n\ngetAllCharacters().then(characters => console.log(characters));\n"],"names":["CharacterPage","useState","characters","setCharacters","isLoading","setIsLoading","error","setError","id","useParams","location","useLocation","locationFrom","state","from","useEffect","oneCharacter","getCharacterDetails","data","console","log","name","className","css","to","Loader","src","alt","width","gender","status","species","origin","type","BASE_URL","axios","response","getAllCharacters","allCharacters","totalPages","currentPage","fetch","json","info","results","pages","then"],"sourceRoot":""}